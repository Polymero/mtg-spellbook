@page "/update"
@using Spellbox.Model
@using MudBlazor

@if (progressInt == 0)
{
    <MudButton @onclick="UpdateOracleDatabase" Variant="Variant.Filled" Color="Color.Success">Update</MudButton>
}
else
{
    @if (progressInt >= 1)
    {
        <MudText>Emptying database...</MudText>
    }
    @if (progressInt >= 2)
    {
        <MudText>Downloading bulk data...</MudText>
    }

    @if (progressInt >= 3)
    {
        <MudText>@cardList?.Count cards downloaded ~ !</MudText>
        <MudText>Parsing...</MudText>
    }

    @if (progressInt >= 4)
    {
        <MudText>Saving...</MudText>
    }

    @if (progressInt < 5)
    {
        <MudProgressCircular Color="Color.Default" Indeterminate="true" />
    }

    @if (progressInt == 5)
    {
        <MudText>@oracleList?.Count oracle cards parsed ~ !</MudText>
        <MudText>@variantList?.Count card variants parsed ~ !</MudText>
        <MudText>Done.</MudText>
    }
}

@inject HttpClient Http
@inject OracleDbContext oracleContext
@code {
    public int progressInt = 0;
    private string bulkUri = "https://api.scryfall.com/bulk-data";
    private List<ScryfallCard>? cardList;
    private List<OracleCard>? oracleList;
    private List<CardVariant>? variantList;

    private async Task UpdateOracleDatabase()
    {
        progressInt ++;
        StateHasChanged();
        await Task.Yield();

        // This speeds things up maybe???
        //oracleContext.ChangeTracker.AutoDetectChangesEnabled = false;

        // Clear database tables
        await oracleContext.BulkDeleteAsync(oracleContext.OracleCards.ToList());
        await oracleContext.BulkDeleteAsync(oracleContext.CardVariants.ToList());
        await oracleContext.BulkDeleteAsync(oracleContext.CardFaces.ToList());
        await oracleContext.BulkDeleteAsync(oracleContext.CardLegalities.ToList());

        //await oracleContext.BulkSaveChangesAsync();

        progressInt ++;
        StateHasChanged();

        // Get ScryfallAPI bulk data
        var bulkData = new BulkData();
        var bulkRequest = new HttpRequestMessage(HttpMethod.Get, bulkUri);
        bulkRequest.Headers.Add("Accept", "application/json;q=0.9,*/*;q=0.8");
        bulkRequest.Headers.Add("User-Agent", "SpellboxAPI");

        var bulkResponse = await Http.SendAsync(bulkRequest);
        if (bulkResponse.IsSuccessStatusCode)
        {
            bulkData = await bulkResponse.Content.ReadFromJsonAsync<BulkData>();
        }

        var oracleUri = bulkData?.Data?.Find(x => x.Type == "default_cards")?.Download_Uri;

        // Get ScryfallAPI default cards
        var cardRequest = new HttpRequestMessage(HttpMethod.Get, oracleUri);
        cardRequest.Headers.Add("Accept", "application/json;q=0.9,*/*;q=0.8");
        cardRequest.Headers.Add("User-Agent", "SpellboxAPI");

        var cardResponse = await Http.SendAsync(cardRequest);
        if (cardResponse.IsSuccessStatusCode)
        {
            cardList = await cardResponse.Content.ReadFromJsonAsync<List<ScryfallCard>>();
        }

        var newOracles = new List<OracleCard>();
        var newVariants = new List<CardVariant>();
        var newFaces = new List<CardFace>();
        var newLegalities = new List<CardLegality>();

        // Loop over cards
        if (cardList is not null)
        {
            progressInt ++;
            StateHasChanged();

            // Rejected card layouts
            var rejectedLayouts = new List<string> { 
                "art_series", 
                "double_faced_token",
                "token",
                "planar",
                "scheme",
                "vanguard",
                "emblem",
                "host"
                };

            var parsedOracleIds = new List<string>();

            foreach (ScryfallCard card in cardList)
            {
                // Do we care about the card?
                if (card.Games is null || !card.Games.Contains("paper")) {continue;}
                if (card.Layout is null || rejectedLayouts.Contains(card.Layout)) {continue;}
                if (card.Promo_Types != null && card.Promo_Types.Contains("thick")) {continue;}

                // Get oracle id
                var _OracleId = "";
                if (card.Oracle_Id != null) {_OracleId = card.Oracle_Id;}
                else {_OracleId = card.Card_Faces?[0].Oracle_Id;}
                if (_OracleId is null) {continue;}

                // Fill CardVariant
                CardVariant parsedVariant = new CardVariant {
                    OracleId = _OracleId,
                    SetName = card.Set_Name,
                    SetCode = card.Set,
                    CollNum = card.Collector_Number,
                    Finishes = card.Finishes,
                    Artist = card.Artist,
                    Released = card.Released_At,
                    Rarity = card.Rarity,
                };
                if (card.Image_Uris != null)
                {
                    parsedVariant.Thumbs = new List<string> { card.Image_Uris.Small ?? "" };
                    parsedVariant.Images = new List<string> { card.Image_Uris.Normal ?? "" };
                    parsedVariant.FlavorTexts = new List<string> { card.Flavor_Text ?? "" };
                    parsedVariant.FlavorNames = new List<string> { card.Flavor_Name ?? "" };
                }
                else if (card.Card_Faces != null)
                {
                    parsedVariant.Thumbs = (from face in card.Card_Faces select face.Image_Uris?.Small is null ? "" : face.Image_Uris.Small).Cast<string>().ToList();
                    parsedVariant.Images = (from face in card.Card_Faces select face.Image_Uris?.Normal is null ? "" : face.Image_Uris.Normal).Cast<string>().ToList();
                    parsedVariant.FlavorTexts = (from face in card.Card_Faces select face.Flavor_Text is null ? "" : face.Flavor_Text).Cast<string>().ToList();
                    parsedVariant.FlavorNames = (from face in card.Card_Faces select face.Flavor_Name is null ? "" : face.Flavor_Name).Cast<string>().ToList();
                }
            
                // Check if the card is already in the Oracle database
                @* if (parsedOracleIds.Contains(_OracleId))
                {
                    // Check if the variant is already in the Oracle database
                    if (parsedVariantIds.Contains(_OracleId + card.Set + card.Collector_Number)) {continue;}

                    // Update existing oracle card with a new variant
                    parsedVariantIds.Add(_OracleId + card.Set + card.Collector_Number);
                    oracleContext.CardVariants.Add(parsedVariant);
                } *@
                if (!parsedOracleIds.Contains(_OracleId))
                {
                    // Fill CardFaces
                    var parsedFaces = new List<CardFace>();
                    if (card.Card_Faces is null)
                    {
                        CardFace newFace = new CardFace {
                            OracleId = _OracleId,
                            Order = 0,
                            Name = card.Name,
                            ManaCost = card.Mana_Cost,
                            TypeLine = card.Type_Line,
                            OracleText = card.Oracle_Text,
                            Power = card.Power,
                            Toughness = card.Toughness,
                            Defense = card.Defense
                        };
                        newFaces.Add(newFace);
                    }
                    else
                    {
                        var i = 0;
                        foreach (ScryfallCardFace face in card.Card_Faces)
                        {
                            CardFace newFace = new CardFace {
                                OracleId = _OracleId,
                                Order = i,
                                Name = face.Name,
                                ManaCost = face.Mana_Cost,
                                TypeLine = face.Type_Line,
                                OracleText = face.Oracle_Text,
                                Power = face.Power,
                                Toughness = face.Toughness,
                                Defense = card.Defense
                            };
                            newFaces.Add(newFace);
                            i ++;
                        }
                    }
                    
                    // Fill OracleCard
                    OracleCard parsedCard = new OracleCard {
                        OracleId = _OracleId,
                        Name = card.Name,
                        ColorIdentity = card.Color_Identity,
                        CMC = card.CMC,
                        Keywords = card.Keywords,
                        TypeLine = card.Type_Line is null ? card.Card_Faces?[0].Type_Line : card.Type_Line,
                    };

                    // Add oracle card to database
                    parsedOracleIds.Add(_OracleId);
                    newOracles.Add(parsedCard);
                    
                    var parsedLegality = new CardLegality();
                    parsedLegality = (CardLegality)card.Legalities;
                    parsedLegality.OracleId = _OracleId;
                    newLegalities.Add(parsedLegality);

                }

                // Add card variant to database
                newVariants.Add(parsedVariant);
            }
        }

        //oracleContext.OracleCards.AddRange(newOracles);
        //oracleContext.CardVariants.AddRange(newVariants);

        await oracleContext.BulkInsertAsync(newOracles);
        await oracleContext.BulkInsertAsync(newVariants);
        await oracleContext.BulkInsertAsync(newFaces);
        await oracleContext.BulkInsertAsync(newLegalities);

        progressInt ++;
        StateHasChanged();

        await oracleContext.BulkSaveChangesAsync();

        oracleList = await oracleContext.OracleCards.ToListAsync();
        variantList = await oracleContext.CardVariants.ToListAsync();

        progressInt ++;
        StateHasChanged();
    }

    private class BulkData
    {
        public List<ScryfallBulk>? Data { get; set; }
    }
}